params {

  /*** input directories and files ***/
  
  data_dir_bulk = "/nfs/data/omnideconv_benchmarking_clean/data/PBMC/"                              // directory to bulk RNA-seq datasets
  data_dir_sc = "/nfs/data/omnideconv_benchmarking_clean/data/singleCell/"                          // directory to scRNA-seq datasets

  /*** output directories and files ***/
  
  results_dir_general = "/nfs/data/omnideconv_benchmarking_clean/benchmark_results/test"    // here all final results are stores
  preProcess_dir = "/nfs/data/omnideconv_benchmarking_clean/preprocess"                     // directory where intermediate files for preprocessing or subsampling are stored
  workDir = "/nfs/home/students/adietrich/omnideconv/benchmark/work"                        // working directory for nextflow

  
  /*** parameters for benchmarking ***/
  
  single_cell_list = ["hao-tiny"]                                                  // list of scRNA-seq dataset names that are used (no underscores in the names allowed!)
  single_cell_norm = ["counts","cpm"]                                                         // list of normalization methods for scRNA-seq datasets
  //bulk_list = ["finotello","finotello-simulation","hoek","hoek-simulation"]
  bulk_list = ["finotello"]                                                  // list of bulk RNA-seq dataset names that are used
  bulk_norm = ["counts","tpm"]                                                                // list of normalization methods for bulk RNA-seq datasets
  
  method_list = ["music"]                                                           // list of deconvolution methods
  
  /*** parameters for subsampling ***/
  ct_fractions = [5,25,50,100,500]                                                    // cell-type fractions for subsampling    
  replicates = 1                                                                                // number of replicates for subsampling
  
  /*** parameters for simulations ***/
  simulation_sc_dataset = ["lambrechts","maynard"]                                                       // name of sc dataset that will be used as basis for simulations
  simulation_sc_norm = ["counts","cpm"]                                                                 // normalization of sc dataset that will be used as basis for simulations
  simulation_n_cells = [1000]                                                                     // number of cells in a pseudo-bulk sample
  simulation_scenario = ['random']                                                              // simulation scenario
  simulation_n_samples = [10]                                                                   // number of pseudo-bulk samples to be generated per simulation run
  simulation_pseudobulk_norm = ["tpm","counts"]                                                          // what type of pseudo-bulk normalization do you want to use
  simulation_cell_types = [[]]                                                                  // which cells to consider for the simulation/signature building. Can be different from those used for the spillover
  
  /*** parameters for spillover ***/
  results_dir_spillover = "/vol/omnideconv_results/results_spillover"    
  spillover_samples_per_cell = [10]                                                             // in the spillover analysis samples contain only one cell types. How many samples we should generate this way
  spillover_celltypes = ["B cells,Monocytes,NK cells,T cells CD8,T cells CD4 conv,Tregs,mDC,pDC,ILC,Plasma cells,Platelet"]    // if we want to select only certain cell types for the spillover analysis
  
  /*** parameters for sensitivity/unknown cellular content analysis ***/
  results_dir_unknown_content = "/vol/omnideconv_results/results_unknown_content"    
  known_cell_types = [["B cells,Stromal cells,T cells CD4 conv,Macrophages"]]                  // subset of cell types that we will use to build the isgnature matrix
  unknown_cell_type = ["Tumor cells"]                                                           // unknown cell type to use
  fractions_unknown_cells = [[0, 0.05, 0.1, 0.2, 0.3, 0.5, 0.7, 0.8, 0.9]]                               // fractions of the unknown cell types to use
  replicates_unknown_content = [5]                            
  
  /*** parameters for cell resolution analysis ***/
  results_dir_resolution = "/vol/omnideconv_results/results_kathi"
  //cell_types_finer_res = [["cDC1,pDCs,B cells,T cells CD8 activated,cDC2,T cells CD8 naive,T cells NK-like,T cells CD8 terminally exhausted,Tregs,T cells CD4 non-reg,NK cells,Monocytes classical,Monocytes non-classical,Macrophages"]]                  // which cell types will we inspect at various resolutions?
  //cell_types_finer_res = [["CAFs MSC iCAF-like s1,CAFs MSC iCAF-like s2,CAFs Transitioning s3,CAFs myCAF like s4,CAFs myCAF like s5,B cells Memory,B cells Naive,T_cells_c4_CD8+_ZFP36,T_cells_c6_IFIT1,T_cells_c5_CD8+_GZMK,T_cells_c7_CD8+_IFNG,T_cells_c8_CD8+_LAG3,T_cells_c0_CD4+_CCR7,T_cells_c1_CD4+_IL7R,T_cells_c2_CD4+_T-regs_FOXP3,T_cells_c3_CD4+_Tfh_CXCL13,T_cells_c9_NK_cells_AREG,T_cells_c11_MKI67,T_cells_c10_NKT_cells_FCGR3A,Myeloid_c10_Macrophage_1_EGR1,Myeloid_c12_Monocyte_1_IL1B,Myeloid_c2_LAM2_APOE,Myeloid_c1_LAM1_FABP5,Myeloid_c8_Monocyte_2_S100A9,Myeloid_c7_Monocyte_3_FCGR3A,Myeloid_c9_Macrophage_2_CXCL10,Cycling_Myeloid,Myeloid_c11_cDC2_CD1C,Myeloid_c4_DCs_pDC_IRF7,Myeloid_c3_cDC1_CLEC9A,Myeloid_c0_DC_LAMP3,Myeloid_c5_Macrophage_3_SIGLEC1"]]
  cell_types_finer_res = [["Endothelial ACKR1,Endothelial RGS5,Endothelial CXCL12,CAFs MSC iCAF-like s1,CAFs MSC iCAF-like s2,CAFs Transitioning s3,CAFs myCAF like s4,CAFs myCAF like s5,PVL Differentiated s3,PVL_Immature s2,PVL Immature s1,Endothelial Lymphatic LYVE1,B cells Memory,B cells Naive,T_cells_c4_CD8+_ZFP36,T_cells_c6_IFIT1,T_cells_c5_CD8+_GZMK,T_cells_c7_CD8+_IFNG,T_cells_c8_CD8+_LAG3,T_cells_c0_CD4+_CCR7,T_cells_c1_CD4+_IL7R,T_cells_c2_CD4+_T-regs_FOXP3,T_cells_c3_CD4+_Tfh_CXCL13,T_cells_c9_NK_cells_AREG,T_cells_c11_MKI67,T_cells_c10_NKT_cells_FCGR3A,Myeloid_c10_Macrophage_1_EGR1,Myeloid_c12_Monocyte_1_IL1B,Myeloid_c2_LAM2_APOE,Myeloid_c1_LAM1_FABP5,Myeloid_c8_Monocyte_2_S100A9,Myeloid_c7_Monocyte_3_FCGR3A,Myeloid_c9_Macrophage_2_CXCL10,Cycling_Myeloid,Myeloid_c11_cDC2_CD1C,Myeloid_c4_DCs_pDC_IRF7,Myeloid_c3_cDC1_CLEC9A,Myeloid_c0_DC_LAMP3,Myoepithelial,Luminal Progenitors,Mature Luminal,Plasmablasts,Cancer Cycling,Cancer Her2 SC,Cancer LumB SC,Cancer Basal SC,Cycling PVL,Cancer LumA SC,Myeloid_c5_Macrophage_3_SIGLEC1"]]
  results_dir_resolution_hoek = "/vol/omnideconv_results/finotello_resolution_analysis"

  /*** parameters for missing cell types analysis ***/
  results_dir_missing_cell_types = "/nfs/data/omnideconv_benchmarking_clean/benchmark_results/test"    
  cell_types_to_exclude = ["B cells"]

  /**params for impact of technology analysis**/
  results_dir_impact_technology = "/vol/omnideconv_results/results_impact_technology"
  replicates_simulation = [5] 
  datasets_impact_technology = ["lambrechts,maynard"]   
  /*** other parameters ***/
  
  publishDirMode = "copy"
  ncores = '5'

  species_sc = 'hs'                                                                             // type of species (mm or hs); currently only used for bayesprism
  
}


profiles {
     standard {
        process.executor = 'local'
        process.max_retries = 50
        process.cpus = 10
        process.memory = '50 GB'
        docker.enabled = true
        process.container = 'omnideconv_benchmark:latest'
        docker.temp = "auto"
     }
     cluster {
        process.executor = 'slurm'
        process.cpus = 1
        process.memory = '100 GB'
        docker.enabled = true
        process.container = 'omnideconv_benchmark:latest'
        containerOptions = "--user adietrich"
        docker.temp = "auto"
     }
     cluster_tum {
        process.executor = 'slurm'
        process.cpus = 2
        process.container = 'omnideconv_benchmark:latest'
        process.memory = '250 GB'
        docker.enabled = false
        process.clusterOptions = '--partition=exbio-cpu'
     }
      cluster_tum_norm {
        process.executor = 'local'
        process.cpus = 1
        process.memory = '200 GB'
     }
}

docker {  
  runOptions = '-v /var/run/docker.sock:/var/run/docker.sock'
}

dag {
  overwrite = true
}

report {
  overwrite = true
}

trace {
  enabled = true
  file = '/nfs/data/omnideconv_benchmarking_clean/trace_cibersortx_subsampling.txt'
  fields = 'task_id,process,name,status,module,container,cpus,time,disk,memory,realtime,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,script'
  sep = ','
  overwrite = true
}


// start on cluster like this:
// nextflow -C /nfs/home/students/adietrich/omnideconv/benchmark/pipeline/nextflow_norm.config run /nfs/home/students/adietrich/omnideconv/benchmark/pipeline/runOmnideconvBenchmarkNORM.nf -profile cluster_tum -with-trace -entry simulation
