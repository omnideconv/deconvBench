params {

  /*** input directories ***/
  data_dir_bulk = "/path/to/bulk/datasets/"                                                     // absolute path to directory that contains RNA-seq datasets
  data_dir_sc = "/path/to/singlecell/datasets/"                                                 // absolute path to directory that contains scRNA-seq datasets


  /*** output directories ***/  
  results_dir_general = "/path/to/results/"                                                     // absolute path to directory in which final results of the main and subsampling workflow are stored
  preProcess_dir = "/path/to/temporary/directory/"                                              // absolute path to directory in which temporary files are stored
  

  /*** Benchmarking Parameters [general] ***/  
  single_cell_list = ["hao-tiny"]                                                               // list of scRNA-seq dataset names that will be used for deconvolution. 
  bulk_list = ["finotello","finotello-simulation"]                                              // list of RNA-seq dataset names that will be used for deconvolution. 
  method_list = ["music"]                                                                       // list of method names that are used for deconvolution. Possible values are: ["autogenes","bayesprism","bisque","cibersortx" ,"dwls","music","scaden","scdc"]
  

  /*** general parameters ***/
  ncores = '4'                                                                                  // Number of cores that are available for methods
  species_sc = 'hs'                                                                             // Type of species in scRNA-seq dataset (mm or hs). Currently only supported by BayesPrism.


  /
  /****** Workflow-specific parameters ******/


  /*** subsampling ***/
  ct_fractions = [5, 50]                                                                        // cell-type fractions for subsampling    
  replicates = 5                                                                                // number of replicates for subsampling
  

  /*** simulation_impact_technology ***/
  results_dir_impact_technology = "/path/to/impact_technology/results/"                         // results directory for this workflow
  replicates_simulation = [5]                                                                   // number of simulation replicates for this workflow
  datasets_impact_technology = ["lambrechts", "maynard"]                                        // names of sc datasets that are used for this workflow


  /*** simulation_spillover ***/
  results_dir_spillover = "/path/to/simulation_spillover/results/"                              // results directory for this workflow
  spillover_samples_per_cell = 10                                                               // number of simulation replicates for this workflow
  spillover_celltypes = ["B cells,Monocytes,NK cells,T cells CD8,T cells CD4 conv"]             // names of cell types for which spillover analysis will be done; have to be present in single-cell dataset                                     


  /*** simulation_unkown_content ***/
  results_dir_unkown_content = "/path/to/simulation_unkown_content/results/"                    // results directory for this workflow
  known_cell_types = ["B cells,Stromal cells,T cells CD4 conv,Macrophages"]                     // subset of cell types that we will use to build the signature matrix
  unkown_cell_types = ["Tumor cells"]                                                           // unknown cell type to use
  fractions_unkown_cells = [0, 0.2, 0.3, 0.9]                                                   // How large the fraction of the unkown cell type is
  replicates_unknown_content = [5]                                                              // number of technical replicates for pseudo-bulk simulation
 

  /*** simulation_resolution_analysis ***/
  results_dir_resolution = "/path/to/simulation_resolution_analysis/results/"                   // results directory for this workflow
  cell_types_finer_res = ["Endothelial ACKR1,Endothelial RGS5,Endothelial CXCL12, ..."]         //which cell types will we inspect at various resolutions?                                                   // number of simulation replicates for this workflow


  /*** impact_missing_cell_types ***/
  results_dir_missing_cell_types = "/path/to/impact_missing_cell_types/results/"                // results directory for this workflow
  cell_types_to_exclude = ["B cells","mDC","Monocytes","NK cells","T cells CD4 conv"]           // each of the cell types that will be excluded from the single cell dataset before deconvoltion                                                 // in the spillover analysis samples contain only one cell types. How many samples we should generate this way

  
}


profiles {
     standard {
        process.executor = 'local'
        process.cpus = 4
        process.memory = '50 GB'
        docker.enabled = false
     }
     docker {
        process.executor = 'local'
        process.cpus = 4
        process.memory = '50 GB'
        docker.enabled = true
        process.container = 'omnideconv_benchmark:1.0'
        docker.temp = "auto"
     }
     slurm_no_docker {
        process.executor = 'slurm'
        process.cpus = 4
        process.memory = '50 GB'
        docker.enabled = false
     }
     slurm_docker {
        process.executor = 'slurm'
        process.cpus = 4
        process.memory = '50 GB'
        docker.enabled = true
        process.container = 'omnideconv_benchmark:1.0'
        docker.temp = "auto"
     }
}

// this is necessary to run CIBERSORTx with a docker in docker environment. The local docker socket has to be mapped as a volume into the omnideconv_benchmark container, so that the CIBERSORTx container can be started inside
docker {  
  runOptions = '-v /var/run/docker.sock:/var/run/docker.sock'
}

// use the `-with-trace` command to get tracing information on each job. Useful for the subsampling workflow, to see how resources scale with size of single-cell dataset
trace {
  fields = 'task_id,process,name,status,module,container,cpus,time,disk,memory,realtime,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,script'
  sep = ','
  overwrite = true
}
