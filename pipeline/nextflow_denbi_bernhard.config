params {

  /*** input directories and files ***/  
  data_dir_bulk = "/vol/omnideconv_input/omnideconv_data/PBMC/"                                 // directory to bulk RNA-seq datasets
  data_dir_sc = "/vol/omnideconv_input/omnideconv_data/singleCell/"                             // directory to scRNA-seq datasets

  script_dir = "/vol/omnideconv_input/benchmark/pipeline/"
  
  /*** output directories and files ***/  
  results_dir_general = "/vol/omnideconv_results/results_tmp"                            // here all final results are stored
  preProcess_dir = "/vol/omnideconv_input/preprocess"                                           // directory where intermediate files for preprocessing or subsampling are stored
  workDir = "/vol/omnideconv_input/work"                                                        // working directory for nextflow

  
  /*** parameters for benchmarking ***/  
  single_cell_list = ["hao-sampled-1"]                                                   // list of scRNA-seq dataset names that are used (no underscores in the names allowed!)
  single_cell_norm = ["counts"]                                                           // list of normalization methods for scRNA-seq datasets
  bulk_list = ["finotello"]                                                              // list of bulk RNA-seq dataset names that are used
  bulk_norm = ["tpm"]                                                                     // list of normalization methods for bulk RNA-seq datasets
  
  method_list = ["rectangle"]    // list of deconvolution methods
  
  method_simulation = ["rectangle"]                                                           // list of deconvolution methods
  
  /*** parameters for subsampling ***/
  //ct_fractions = [5,10,25,50,75,100,300,500]                                                    // cell-type fractions for subsampling    
  ct_fractions = [0.2, 0.4]    
  replicates = 10                                                                                // number of replicates for subsampling
  
  /*** parameters for simulations ***/
  simulation_sc_dataset = ["lambrechts"]                                                       // name of sc dataset that will be used as basis for simulations
  simulation_sc_norm = ["counts"]                                                                 // normalization of sc dataset that will be used as basis for simulations
  simulation_n_cells = [1000]                                                                     // number of cells in a pseudo-bulk sample
  simulation_scenario = ['random']                                                              // simulation scenario
  simulation_n_samples = [10]                                                                   // number of pseudo-bulk samples to be generated per simulation run
  simulation_pseudobulk_norm = ["tpm"]                                                          // what type of pseudo-bulk normalization do you want to use
  simulation_cell_types = [[]]                                                                  // which cells to consider for the simulation/signature building. Can be different from those used for the spillover
  
  /*** parameters for spillover ***/
  results_dir_spillover = "/vol/omnideconv_results/results_spillover"    
  spillover_samples_per_cell = [10]                                                             // in the spillover analysis samples contain only one cell types. How many samples we should generate this way
  spillover_celltypes = ["B cells,Monocytes,NK cells,T cells CD8,T cells CD4 conv,Tregs,mDC,pDC"]    // if we want to select only certain cell types for the spillover analysis
  
  /*** parameters for sensitivity/unknown cellular content analysis ***/
  results_dir_unknown_content = "/vol/omnideconv_results/results_tmp"    
  known_cell_types = [["B cells,Stromal cells,T cells CD4 conv,Macrophages"]]                  // subset of cell types that we will use to build the isgnature matrix
  unknown_cell_type = ["Tumor cells"]                                                           // unknown cell type to use
  fractions_unknown_cells = [[0, 0.05, 0.1, 0.2, 0.3, 0.5, 0.7, 0.8, 0.9]]                               // fractions of the unknown cell types to use
  replicates_unknown_content = [5]                               
  
  /*** parameters for cell resolution analysis ***/
  results_dir_resolution = "/vol/omnideconv_results/results_resolution"
  cell_types_finer_res = [["cDC1,pDC,B cell,T cell CD8 activated,cDC2,T cell CD8 naive"]]                  // which cell types will we inspect at various resolutions?
  
  cell_types_to_exclude = ["B cells","mDC","Monocytes","NK cells","T cells CD4 conv","T cells CD8","Tregs","pDC","Platelet","ILC","Plasma cells","-"]
  results_dir_missing_cell_types = "/vol/omnideconv_results/results_missing_cell_types"    

  /*** parameters for missing cell types analysis ***/
  results_dir_missing_cell_types = "/vol/omnideconv_results/results_tmp"    
  cell_types_to_exclude = ["B cells","mDC","Monocytes","NK cells","T cells CD4 conv","T cells CD8","Tregs","pDC","Platelet","ILC","Plasma cells","-"]
  /*** other parameters ***/
  
  publishDirMode = "copy"
  ncores = '14'

  species_sc = 'hs'                                                                             // type of species (mm or hs); currently only used for bayesprism

}


profiles {
     standard {
        process.executor = 'local'
        process.max_retries = 50
        process.cpus = 10
        process.memory = '1 GB'
        docker.enabled = true
        process.container = 'omnideconv_benchmark:latest'
        docker.temp = "auto"
     }
     cluster {
        process.executor = 'slurm'
        process.cpus = 14    
        process.memory = '110 GB'
        docker.enabled = true
        process.container = 'omnideconv_benchmark:latest'
        docker.temp = "auto"
        docker.cacheDir = "/vol/spool/tmp"
     }
     cluster_dwls {
        process.executor = 'slurm'
        process.cpus = 10
        process.memory = '240 GB'
        docker.enabled = true
        process.container = 'omnideconv_benchmark:latest'
        docker.temp = "auto"
        docker.cacheDir = "/vol/spool/tmp"
     }
}

docker {  
  runOptions = '-v /var/run/docker.sock:/var/run/docker.sock -v /vol/omnideconv_results:/vol/omnideconv_results'
}

dag {
  overwrite = true
}

report {
  overwrite = true
}

//process {
//  errorStrategy = 'ignore'
//}

trace {
  enabled = false
  file = '/vol/omnideconv_results/trace_<timestamp>.txt'
  fields = 'task_id,process,name,status,module,container,cpus,time,disk,memory,realtime,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,script'
  sep = ','
  overwrite = true
}



// start on cluster like this:
// nextflow -C /vol/omnideconv_input/benchmark/pipeline/nextflow_denbi_bernhard.config run /vol/omnideconv_input/benchmark/pipeline/runOmnideconvBenchmark.nf -profile cluster -w /vol/omnideconv_input/work/ -entry subsampling

// stop all slurm jobs:
// squeue -u "ubuntu"| awk '{print $1}' | tail -n+2 | xargs scancel

// start container manually:
// docker run -it --memory 122880m -v /vol/omnideconv_input:/vol/omnideconv_input -v /vol/omnideconv_results:/vol/omnideconv_results -v /var/run/docker.sock:/var/run/docker.sock --cpus 14 omnideconv_benchmark:latest
// in R:
// library(omnideconv)
// sc_matrix <- readRDS('/vol/omnideconv_input/omnideconv_data/singleCell/hao-sampled-1/matrix_norm_counts.rds')
// sc_celltype_annotations <- readRDS('/vol/omnideconv_input/omnideconv_data/singleCell/hao-sampled-1/celltype_annotations.rds')
// sc_batch <- readRDS('/vol/omnideconv_input/omnideconv_data/singleCell/hao-sampled-1/batch.rds')
// bulk_matrix <- readRDS('vol/omnideconv_input/omnideconv_data/PBMC/hoek/hoek_tpm.rds')
// sig <- readRDS('/vol/omnideconv/results_run/music_hao-sampled-1_cpm_hoek_tpm_ct0.02_rep2/signature.rds')
