params {
  workDir = "/vol/spool/work"
  publishDirMode = "copy"
  results_dir_general = "/vol/spool/results_test"
  results_dir = "/vol/spool/results_test"
  // single_cell_list = ["hao-sampled-1", "hao-sampled-2", "hao-sampled-3"]
  single_cell_list = ["hao-sampled-1"]
  single_cell_norm = ["cpm", "counts"]
  bulk_list = ["finotello"]
  bulk_norm = ["counts"]
  method_list2 = []
  method_list = ["scaden"]
  //method_list = ["scaden"]
  extra_parameters = []
  data_dir_bulk = "/vol/spool/omnideconv_data/data/PBMC/"
  data_dir_sc = "/vol/spool/omnideconv_data/data/singleCell/"
  mapping_sheet = "/vol/spool/omnideconv_data/cell_type_mapping.xlsx"
  sc_files = "/vol/spool/omnideconv_data/sc_files_table.csv"
  simulation_scenarios = ["spikein", "truefractions", "spillover"]
}


profiles {
     standard {
        process.executor = 'local'
        process.max_retries = 50
     }
     cluster {
        process.executor = 'slurm'
        process.cpu = '28'
        process.memory = '240 GB'
        docker.enabled = true
        process.container = 'omnideconv_benchmark:latest'
        containerOptions = "--user root"
     }
     local {
	      singularity.enabled = true
	      singularity.cacheDir = '/nfs/scratch/singularity_cache'
	      process.cpu = '30'
        process.memory = '250 GB'
     }
}

docker {
  user = 'ubuntu:ubuntu'
  sudo = true
  runOptions = '-v /var/run/docker.sock:/var/run/docker.sock'
}

//process {
//  withLabel: deconvolution_related {
//    // conda = '/vol/omnideconv_dependencies/miniconda3/envs/omnideconv'
//    cpus = 8
//  }
//}


// start on cluster like this:
// nextflow -C ~/benchmark/omnideconv/nextflow_denbi.config run ~/benchmark/pipeline/runOmnideconvBenchmark.nf -profile cluster -w /vol/spool/work